Description: >
  This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
  via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters:

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2

  MaxCount:
    Description: Maximum number of instances of this task we can run across our cluster
    Type: Number
    Default: 10

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /

  ECSServiceAutoScalingRoleARN:
    Description: The ECS service auto scaling role ARN
    Type: String

  DefaultTargetGroup:
    Description: Default target group ARN
    Type: String

  DefaultTargetGroupFullName:
    Description: Default target group full name
    Type: String

  JDBCConnectionString:
    Description: Petclinic RDS connecting String
    Type: String

  ContainerImageName:
    Default: 414831080620.dkr.ecr.us-west-2.amazonaws.com/petclinic
    Description: Docker container image name
    Type: String

  DBPassword:
    Description: The database admin account password
    Type: String

  DBUser:
    Description: The database admin account
    Type: String

  ImageVersion:
    Description: Docker image version to be deployed
    Type: String


Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !GetAtt ServiceRole.Arn # !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: "petclinic-service"
          ContainerPort: 8080
          TargetGroupArn: !Ref DefaultTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: petclinic-service
      ContainerDefinitions:
        - Name: petclinic-service
          Essential: true
          #Image: !Ref ContainerImageName
          Image: !Join
            - ':'
            - - !Ref ContainerImageName
              - !Ref ImageVersion
          Memory: 255
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: DATABASE
              Value: mysql
            - Name: SPRING_DATASOURCE_URL
              Value: !Ref JDBCConnectionString
            - Name: SPRING_DATASOURCE_USERNAME
              Value: !Ref DBUser
            - Name: SPRING_DATASOURCE_PASSWORD
              Value: !Ref DBPassword
            - Name: SPRING_DATASOURCE_INITIALIZATION_MODE
              Value: always
            - Name: SPRING_DATASOURCE_CONTINUE_ON_ERROR
              Value: 'true'

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref DefaultTargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets"
                      ],
                    "Resource": "*"
                  }
                ]
            }

  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      RoleARN: !Ref ECSServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 180
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 2

  ServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 180
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -2

  RequestScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Request count is less than 10 per Target
      AlarmDescription: Alarm if request count is less than 10 per Target per one period
      Namespace: AWS/ApplicationELB
      MetricName: RequestCountPerTarget
      Dimensions:
        # - Name: TargetGroup
        #   Value: !GetAtt DefaultTargetGroup.TargetGroupFullName
        - Name: TargetGroup
          Value: !Ref DefaultTargetGroupFullName
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleInPolicy

  RequestScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Request count is more than 100 requests per Target
      AlarmDescription: Alarm if request count is more than 100 requests per Target per one period
      Namespace: AWS/ApplicationELB
      MetricName: RequestCountPerTarget
      Dimensions:
        # - Name: TargetGroup
        #   Value: !GetAtt DefaultTargetGroup.TargetGroupFullName
        - Name: TargetGroup
          Value: !Ref DefaultTargetGroupFullName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleOutPolicy
